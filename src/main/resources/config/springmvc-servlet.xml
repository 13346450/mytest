<?xml version="1.0" encoding="UTF-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:p="http://www.springframework.org/schema/p" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="  
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
		
	 <!-- 让spring容器识别相应的注解@Autowired/@Resource 、@ PostConstruct、@ PreDestroy/@PersistenceContext/@Required
     Spring 在容器初始化时将自动扫描 base-package 指定的包及其子包下的所有 class 文件，
             所有标注了@Repository、@Service、@Controller的类都将被注册为 Spring Bean,
     Spring 会自动创建相应的 BeanDefinition 对象，并注册到 ApplicationContext 中 ,
              默认 Bean 名称会是小写开头的非限定类名。
              此处扫描所有的控制器层，不能包含service层
             例外：  <context:exclude-filter type="annotation" 
             expression="org.springframework.stereotype.Service" />            
     -->
    <context:component-scan base-package="com.dnake.controller"></context:component-scan>
    
    <bean id="loginCheck" class="com.dnake.common.interceptor.LoginInterceptor"/>
    <!-- 注解请求映射 ，等价于<mvc:annotation-driven />，
    	如果是REST风格的URL，静态资源就不会被拦截。因为我们精准的注入了拦截器 -->
<!--     <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">   -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">  
		<property name="interceptors">
		    <list>
		    	<!-- 登录拦截 -->
		    	<ref bean="loginCheck"/> 
		    </list>
		</property>
	</bean>
	
	 <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射
                 它负责根据 Bean中的Spring MVC注解对 Bean进行加工处理，使这些 Bean变成控制器并映射特定的 URL请求 -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">  
			<list>
				<ref bean="byteArray_hmc" />  
				<ref bean="string_hmc" />  
				<ref bean="resource_hmc" />  
				<ref bean="source_hmc" />  
				<ref bean="xmlAwareForm_hmc" />  
				<ref bean="jaxb2RootElement_hmc" />  
				<ref bean="jackson_hmc" />
			</list>  
		</property>
		<property name="webBindingInitializer">
            <bean class="com.dnake.common.MyBindingInitializer"/>
        </property>
	</bean>  
<!-- 	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" > -->
<!-- 		<property name="messageConverters">   -->
<!-- 			<list> -->
<!-- 				<ref bean="byteArray_hmc" />   -->
<!-- 				<ref bean="string_hmc" />   -->
<!-- 				<ref bean="resource_hmc" />   -->
<!-- 				<ref bean="source_hmc" />   -->
<!-- 				<ref bean="xmlAwareForm_hmc" />   -->
<!-- 				<ref bean="jaxb2RootElement_hmc" />   -->
<!-- 				<ref bean="jackson_hmc" /> -->
<!-- 			</list>   -->
<!-- 		</property> -->
<!-- 		<property name="webBindingInitializer"> -->
<!--             <bean class="com.dnake.common.MyBindingInitializer"/> -->
<!--         </property> -->
<!-- 	</bean> -->
	   
	<bean id="byteArray_hmc" class="org.springframework.http.converter.ByteArrayHttpMessageConverter"  /><!-- 处理.. -->
	<bean id="string_hmc" class="org.springframework.http.converter.StringHttpMessageConverter" /><!-- 处理.. -->
	<bean id="resource_hmc" class="org.springframework.http.converter.ResourceHttpMessageConverter" /><!-- 处理.. -->
	<bean id="source_hmc" class="org.springframework.http.converter.xml.SourceHttpMessageConverter" /><!-- 处理.. -->
	<bean id="xmlAwareForm_hmc" class="org.springframework.http.converter.xml.XmlAwareFormHttpMessageConverter" /><!-- 处理.. -->
	<bean id="jaxb2RootElement_hmc" class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter" /><!-- 处理.. -->
	<bean id="jackson_hmc" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
	
	
	<!-- spring mvc 输入校验
	  如果不加默认到 使用classpath下的 ValidationMessages.properties
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<property name="validationMessageSource" ref="messageSource" />
	</bean>
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	</bean>
	<bean id="webBindingInitializer"
		class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
		<property name="conversionService" ref="conversionService"/>  
		<property name="validator" ref="validator" />
	</bean>
	-->
	
    <!-- 视图 beans Controller 跳转的JSP页面路径 和 文件的后缀  --> 
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/pages/" p:suffix=".jsp" 
          p:viewClass="org.springframework.web.servlet.view.JstlView" />
    
</beans>